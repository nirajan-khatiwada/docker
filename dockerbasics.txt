To make a container from image
->docker run image

To make container from image and run in interative mode(-it)
->docker run -it image
->the terminal of the container will we opened after building the container

To make container with name 
->docker run --name name image







Port mapping
->docker run -p computerport:dockerport image
->to map computer port with docker port.The incomming request at the computerport will redirect to docker container port

Background running
->docker run -d image
->to run builded container in background

passing env in docker
->docker run -e key=value image

to start container
->docker start container_id

to stop container
->docker stop container_id

to remove container
->docker rm container_id
->to remove docker it should be removed first of all

execute command in container
->docker exec -it container_id bash
->to start a terminal in docker container


to see all the running container
->docker ps

to see all the container running as well as not running
->docker ps -a


->to build a docker file










Make a docker file Dockerfile
Some of the command(Watch fireship video)
FROM IMAGE           ->make container of this image
RUN CONMMAND         ->run command on this command
COPY SOURCE DESTINATION ->conpy file to container
ENTRYPOINT []  ->run command automatically after container is started
CMD [] =>run command 
ENV key=value
EXPOSE port =>to expose file
WORKDIR DIRECTRY  ->Switch to directry in container all the work will be in this directry
COPY . .      ->copy all the file of location . to the container . except the file and folder of .dockerignore







The COPY command in Docker is used to copy files and directories from your local file system into a Docker image.

Copy all files and folders from the current directory to the destination in the container:
COPY . /path/to/destination

Copy a specific file from the current directory to the destination in the container:
COPY ./filename.extension /path/to/destination

Copy an entire folder from the current directory to the destination in the container:
COPY ./foldername /path/to/destination

Copy only the contents of a folder (not the folder itself) from the current directory to the destination in the container:
Dockerfile
Copy code
COPY ./foldername/ /path/to/destination








MAKE file .dockerignore
->inside that file
->Exclude files and directories from Docker build context to optimize image size and build speed.
nodemodules/




Building the docker file
docker build -t IMAGENAME DOCKERFILELOCATION





->docker file and composer file should be in root directry of my projects for example in django in manage.py directry




PUBLISHING THE DOCKER IMAGE IN DOCKER
->make docker image of name username/imagename
->docker login
->docker push username/imagename




VOLUMES IN CONTAINER  =>s
=>docker run -it -v HOST_MACINE_FOLERNAME:CONTAINER_FOLDERNAME IMAGENAME
eg:docker run -it -v /home/nirajan/Downloads/backup:/home/app ubuntu

=>all the files and folders of /app will be in /backup and all the files and folders of /backup will be in /app
=>use cases:
1)to take backup . even the container is deleted files amd folders of /app will be in /backup
2)to delete container only not its data
3)to make a new container with same data



=>networking in docker



extra:
Remember, while one Docker container can host multiple services like MySQL, Code Server, and Redis, it's difficult to install and manage them this way. Each service usually has its own Docker image. To make things easier, we use Docker Compose. Docker Compose lets us define and run multiple containers for different services using a single configuration file. This way, we can use prebuilt images from Docker Hub for each service.
